// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Crontab.flex

package com.github.xepozz.crontab.language.parser;

import com.github.xepozz.crontab.language.psi.CrontabTypes;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;


class CrontabLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMAND = 2;
  public static final int SCHEDULE = 4;
  public static final int VARIABLE = 6;
  public static final int SIMPLE_SYNTAX = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\4\u0200\1\u0300\1\u0400\1\u0200\5\u0500\1\u0600"+
    "\1\u0700\1\u0800\5\u0200\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\1\u0e00\1\u0f00\3\u0200\1\u1000\17\u0200\1\u1100\165\u0200\1\u0700"+
    "\1\u0200\1\u1200\1\u1300\1\u1400\1\u1500\123\u0200\1\u0b00\4\u0200"+
    "\1\u1600\10\u0200\1\u1700\2\u0200\1\u1800\1\u1900\1\u1500\1\u0200"+
    "\1\u0600\1\u0200\1\u1a00\1\u1700\1\u0a00\3\u0200\1\u1400\1\u1b00"+
    "\114\u0200\1\u1c00\1\u1400\153\u0200\1\u1d00\11\u0200\1\u1e00\1\u1500"+
    "\6\u0200\1\u1400\u0f16\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\1"+
    "\1\0\1\5\1\6\3\0\1\7\2\0\1\10\1\0"+
    "\1\11\1\12\1\0\1\13\12\14\3\0\1\15\2\0"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\31\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\31\1\45\1\31\1\0\1\46\2\0\1\47\1\0"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\50"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\31\1\37\1\40\1\41\1\42\1\43\1\44\1\31"+
    "\1\45\1\31\12\0\1\3\32\0\1\3\217\0\2\51"+
    "\115\0\1\52\u01e0\0\12\53\206\0\12\53\306\0\12\53"+
    "\234\0\12\53\166\0\12\53\140\0\12\53\166\0\12\53"+
    "\106\0\12\53\u0116\0\12\53\106\0\12\53\346\0\1\3"+
    "\u015f\0\12\53\46\0\12\53\u012c\0\12\53\200\0\12\53"+
    "\246\0\12\53\6\0\12\53\266\0\12\53\126\0\12\53"+
    "\206\0\12\53\6\0\12\53\246\0\13\3\35\0\2\3"+
    "\5\0\1\3\57\0\1\3\240\0\1\3\u01cf\0\12\53"+
    "\46\0\12\53\306\0\12\53\26\0\12\53\126\0\12\53"+
    "\u0196\0\12\53\246\0\12\53\206\0\12\53\u012c\0\12\53"+
    "\200\0\12\53\74\0\12\53\220\0\12\53\166\0\12\53"+
    "\146\0\12\53\206\0\12\53\106\0\12\53\266\0\12\53"+
    "\u0164\0\62\53\100\0\12\53\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[7936];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\2\10\1\11\2\12\1\13\1\14\1\15\1\16\1\17"+
    "\12\12\3\20\1\21\2\20\1\2\1\3\1\1\1\20"+
    "\22\0\1\20\1\0\1\20\1\22\1\23\1\24\1\20"+
    "\2\0\2\20";

  private static int [] zzUnpackAction() {
    int [] result = new int[72];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\334"+
    "\0\u0134\0\u0160\0\334\0\u018c\0\334\0\u01b8\0\u01e4\0\u0210"+
    "\0\334\0\u0134\0\334\0\334\0\334\0\u023c\0\u0268\0\u0294"+
    "\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c\0\u03c8\0\u03f4"+
    "\0\u0420\0\u044c\0\u0478\0\u04a4\0\334\0\u04d0\0\u04fc\0\u0528"+
    "\0\u0554\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u0604\0\u0630\0\u065c"+
    "\0\u0688\0\u06b4\0\u06e0\0\u070c\0\u0738\0\u0764\0\u0790\0\u07bc"+
    "\0\u07e8\0\u0814\0\u0840\0\u086c\0\u0898\0\u08c4\0\u08f0\0\u091c"+
    "\0\334\0\334\0\334\0\334\0\u0948\0\u0974\0\u0898\0\u08f0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[72];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\6\1\11\1\6\1\12\1\6"+
    "\1\13\3\6\1\14\1\6\1\15\27\16\2\6\1\17"+
    "\3\6\1\20\1\7\1\10\1\6\1\11\47\20\1\21"+
    "\1\7\2\21\1\22\3\21\1\23\1\24\1\25\1\26"+
    "\1\27\2\21\1\30\2\21\1\31\1\21\1\32\3\21"+
    "\1\33\2\21\1\34\1\35\1\36\2\21\1\37\1\40"+
    "\2\21\1\41\3\21\1\7\1\21\1\37\1\21\1\42"+
    "\1\7\1\10\1\6\1\11\1\43\1\42\1\44\5\42"+
    "\1\45\32\42\1\46\3\42\1\47\1\50\1\51\1\52"+
    "\1\51\43\47\1\53\3\47\55\0\1\7\46\0\1\7"+
    "\5\0\1\10\51\0\2\12\1\54\51\12\14\0\1\14"+
    "\51\0\1\16\1\0\1\16\2\0\27\16\1\0\2\16"+
    "\4\0\1\7\10\0\1\16\1\0\1\16\2\0\27\16"+
    "\1\0\1\16\1\17\3\0\2\20\1\0\51\20\14\21"+
    "\1\0\36\21\15\0\1\27\75\0\1\55\3\0\1\56"+
    "\34\0\1\57\53\0\1\60\13\0\1\61\33\0\1\62"+
    "\22\0\1\63\30\0\1\64\15\0\1\65\53\0\1\66"+
    "\37\0\1\67\51\0\1\70\3\0\1\71\16\0\1\65"+
    "\37\0\1\72\13\0\1\73\5\0\1\72\26\0\1\74"+
    "\30\0\1\42\4\0\10\42\1\0\36\42\1\43\1\75"+
    "\1\0\2\75\1\42\7\43\1\75\30\43\1\76\5\43"+
    "\1\44\1\77\1\0\2\77\2\44\1\42\5\44\1\77"+
    "\30\44\1\100\5\44\1\42\1\7\3\0\10\42\1\0"+
    "\32\42\1\46\3\42\1\47\4\0\47\47\1\101\1\7"+
    "\46\101\1\7\57\101\1\47\1\7\3\0\43\47\1\53"+
    "\3\47\6\0\1\12\104\0\1\102\41\0\1\102\47\0"+
    "\1\102\52\0\1\102\62\0\1\103\21\0\1\103\36\0"+
    "\1\102\51\0\1\102\1\0\1\102\56\0\1\102\5\0"+
    "\1\102\42\0\1\103\62\0\1\102\51\0\1\102\53\0"+
    "\1\103\50\0\1\102\57\0\1\103\34\0\1\103\52\0"+
    "\1\103\31\0\2\75\1\0\2\75\1\104\40\75\1\105"+
    "\5\75\1\43\1\75\1\0\2\75\10\43\1\75\30\43"+
    "\1\76\5\43\2\77\1\0\4\77\1\104\36\77\1\106"+
    "\5\77\1\44\1\77\1\0\2\77\10\44\1\77\30\44"+
    "\1\100\5\44\2\75\1\0\2\75\1\107\40\75\1\105"+
    "\5\75\2\77\1\0\4\77\1\110\36\77\1\106\5\77";

  private static int [] zzUnpacktrans() {
    int [] result = new int[2464];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\1\1\1\11\2\1\1\11\1\1\1\11"+
    "\3\1\1\11\1\1\3\11\17\1\1\11\6\1\22\0"+
    "\1\1\1\0\1\1\4\11\2\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[72];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CrontabLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 21: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 22: break;
          case 3:
            { yybegin(YYINITIAL); return CrontabTypes.NEWLINE;
            }
          // fall through
          case 23: break;
          case 4:
            { return CrontabTypes.COMMENT;
            }
          // fall through
          case 24: break;
          case 5:
            { yybegin(SCHEDULE); return CrontabTypes.STAR;
            }
          // fall through
          case 25: break;
          case 6:
            { yybegin(SCHEDULE); return CrontabTypes.NUMBER;
            }
          // fall through
          case 26: break;
          case 7:
            { yybegin(SIMPLE_SYNTAX); return CrontabTypes.AT;
            }
          // fall through
          case 27: break;
          case 8:
            { yybegin(VARIABLE); return CrontabTypes.IDENTIFIER;
            }
          // fall through
          case 28: break;
          case 9:
            { yybegin(YYINITIAL); return CrontabTypes.CONTENT;
            }
          // fall through
          case 29: break;
          case 10:
            { yypushback(1); yybegin(COMMAND);
            }
          // fall through
          case 30: break;
          case 11:
            { return CrontabTypes.STAR;
            }
          // fall through
          case 31: break;
          case 12:
            { return CrontabTypes.COMMA;
            }
          // fall through
          case 32: break;
          case 13:
            { return CrontabTypes.HYPHEN;
            }
          // fall through
          case 33: break;
          case 14:
            { return CrontabTypes.SLASH;
            }
          // fall through
          case 34: break;
          case 15:
            { return CrontabTypes.NUMBER;
            }
          // fall through
          case 35: break;
          case 16:
            { return CrontabTypes.CONTENT;
            }
          // fall through
          case 36: break;
          case 17:
            { return CrontabTypes.EQUAL_SIGN;
            }
          // fall through
          case 37: break;
          case 18:
            { yypushback(yylength()); yybegin(COMMAND);
            }
          // fall through
          case 38: break;
          case 19:
            { return CrontabTypes.MONTH;
            }
          // fall through
          case 39: break;
          case 20:
            { return CrontabTypes.DAY;
            }
          // fall through
          case 40: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
